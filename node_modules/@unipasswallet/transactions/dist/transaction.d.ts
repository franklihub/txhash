import { BigNumber, BytesLike, providers } from "ethers";
export declare enum CallType {
    Call = 0,
    DelegateCall = 1
}
export interface Transaction {
    readonly _isUnipassWalletTransaction: true;
    callType: CallType;
    revertOnError: boolean;
    gasLimit: BigNumber;
    target: BytesLike;
    value: BigNumber;
    data: BytesLike;
}
export declare function transactionToJson(tx: Transaction): string;
export declare function transactionFromJsonObj(obj: any): Transaction;
export declare function isUnipassWalletTransaction(v: any): v is Transaction;
export declare type Transactionish = providers.TransactionRequest | Transaction;
export declare function toTransaction(transaction: Transactionish): Transaction;
export declare function toTransactions(transactions: Transactionish | Transactionish[]): Transaction[];
export declare function digestTxHash(chainId: number, walletAddr: BytesLike, nonce: number, transactions: Transaction[]): string;
export declare function digestGuestTxHash(chainId: number, moduleGuestAddress: BytesLike, transactions: Transaction[]): string;
//# sourceMappingURL=transaction.d.ts.map